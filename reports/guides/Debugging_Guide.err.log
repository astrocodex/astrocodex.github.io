Traceback (most recent call last):
  File "/Users/ipasha/miniforge3/envs/py3/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/ipasha/miniforge3/envs/py3/lib/python3.11/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/ipasha/miniforge3/envs/py3/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/ipasha/miniforge3/envs/py3/lib/python3.11/asyncio/base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/Users/ipasha/miniforge3/envs/py3/lib/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/Users/ipasha/miniforge3/envs/py3/lib/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/ipasha/miniforge3/envs/py3/lib/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
#-------------------------------------------------------
#                     Code Below
#-------------------------------------------------------
import numpy as np 
from math import sqrt 

def throw_dart():
    """
    A function that effectively throws a dart, if it lands in
    the quarter circle we return 1, if not we return 0.
    """
    x, y = np.random.uniform(0,1, 2), np.random.uniform(0,1, 2) #giving each dart a random x,y position between 0 and 1
    if sqrt((x - 0.5)**2 + (y - 0.5)**2) <= 0.5: #check to see if its in the circle
        return 1
    else:
        return 0


def estimate_pi(number_of_darts):
    """
    A simple function to estimate Ï€ using
    sampling from a normal distribution with num points.
    """
    number_of_darts_in_circle = 0

    for throw in range(number_of_darts):
        number_of_darts_in_circle += throw_dart()
        
    pi_approx = 4 * (number_of_darts_in_circle / number_of_darts)
    
    return pi_approx

#-------------------------------------------------------
#                 Executing the Code
#-------------------------------------------------------

estimate_pi(200000)

------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[1], line 37[0m
[1;32m     31[0m     [38;5;28;01mreturn[39;00m pi_approx
[1;32m     33[0m [38;5;66;03m#-------------------------------------------------------[39;00m
[1;32m     34[0m [38;5;66;03m#                 Executing the Code[39;00m
[1;32m     35[0m [38;5;66;03m#-------------------------------------------------------[39;00m
[0;32m---> 37[0m [43mestimate_pi[49m[43m([49m[38;5;241;43m200000[39;49m[43m)[49m

Cell [0;32mIn[1], line 27[0m, in [0;36mestimate_pi[0;34m(number_of_darts)[0m
[1;32m     24[0m number_of_darts_in_circle [38;5;241m=[39m [38;5;241m0[39m
[1;32m     26[0m [38;5;28;01mfor[39;00m throw [38;5;129;01min[39;00m [38;5;28mrange[39m(number_of_darts):
[0;32m---> 27[0m     number_of_darts_in_circle [38;5;241m+[39m[38;5;241m=[39m [43mthrow_dart[49m[43m([49m[43m)[49m
[1;32m     29[0m pi_approx [38;5;241m=[39m [38;5;241m4[39m [38;5;241m*[39m (number_of_darts_in_circle [38;5;241m/[39m number_of_darts)
[1;32m     31[0m [38;5;28;01mreturn[39;00m pi_approx

Cell [0;32mIn[1], line 13[0m, in [0;36mthrow_dart[0;34m()[0m
[1;32m      8[0m [38;5;250m[39m[38;5;124;03m"""[39;00m
[1;32m      9[0m [38;5;124;03mA function that effectively throws a dart, if it lands in[39;00m
[1;32m     10[0m [38;5;124;03mthe quarter circle we return 1, if not we return 0.[39;00m
[1;32m     11[0m [38;5;124;03m"""[39;00m
[1;32m     12[0m x, y [38;5;241m=[39m np[38;5;241m.[39mrandom[38;5;241m.[39muniform([38;5;241m0[39m,[38;5;241m1[39m, [38;5;241m2[39m), np[38;5;241m.[39mrandom[38;5;241m.[39muniform([38;5;241m0[39m,[38;5;241m1[39m, [38;5;241m2[39m) [38;5;66;03m#giving each dart a random x,y position between 0 and 1[39;00m
[0;32m---> 13[0m [38;5;28;01mif[39;00m [43msqrt[49m[43m([49m[43m([49m[43mx[49m[43m [49m[38;5;241;43m-[39;49m[43m [49m[38;5;241;43m0.5[39;49m[43m)[49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[38;5;241;43m2[39;49m[43m [49m[38;5;241;43m+[39;49m[43m [49m[43m([49m[43my[49m[43m [49m[38;5;241;43m-[39;49m[43m [49m[38;5;241;43m0.5[39;49m[43m)[49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[38;5;241;43m2[39;49m[43m)[49m [38;5;241m<[39m[38;5;241m=[39m [38;5;241m0.5[39m: [38;5;66;03m#check to see if its in the circle[39;00m
[1;32m     14[0m     [38;5;28;01mreturn[39;00m [38;5;241m1[39m
[1;32m     15[0m [38;5;28;01melse[39;00m:

[0;31mTypeError[0m: only size-1 arrays can be converted to Python scalars

